
class TreeNode(item: Int)
{
private var  left, right: TreeNode = _


def this( left: TreeNode, right: TreeNode, item: Int)=
{
this(item)
this.left = left;
this.right = right;

}

def itemCheck():Int = {
// if necessary deallocate here
if (left==null)
                item;
else {
                item + left.itemCheck() - right.itemCheck();
            }
}
}


object TreeNode {
def bottomUpTree(item: Int, depth: Int): TreeNode = {
  if (depth>0){
 new TreeNode(bottomUpTree(2*item-1, depth-1), bottomUpTree(2*item, depth-1), item)
}
else {
 new TreeNode(item);
}
}
}

object BinaryTrees {
  import TreeNode._
  
    var minDepth = 4
    
    def main(args: Array[String]) = {
        var millis = System.currentTimeMillis()
        
        var n = 20
        if (args.length > 0) n = Integer.parseInt(args(0))
        
           var maxDepth = if (minDepth + 2 > n)  minDepth+2
                                else n
                                
           var stretchDepth = maxDepth+1
           

           var check = (TreeNode.bottomUpTree(0, stretchDepth)).itemCheck()
        println("stretch tree of depth "+stretchDepth+"\t check: " + check);


       var  longLivedTree = TreeNode.bottomUpTree(0,maxDepth)

  var depth = minDepth
  while (depth<=maxDepth) {
    var  iterations = 1 << (maxDepth - depth + minDepth);
    check = 0;

for (i<-1 to iterations){
  check += (TreeNode.bottomUpTree(i,depth)).itemCheck();
  check += (TreeNode.bottomUpTree(-i,depth)).itemCheck();
}
  println((iterations*2) + "\t trees of depth " + depth + "\t check: " + check);

  depth += 2
}

  println("long lived tree of depth " + maxDepth + "\t check: "+ longLivedTree.itemCheck());

   var total = System.currentTimeMillis() - millis;
   println("[Binary Trees-" + System.getProperty("project.name")+ " Benchmark Result: " + total + "]");
 }
}

var args = Array("20")
BinaryTrees.main(args)
