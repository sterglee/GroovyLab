// reimplement Matrix-Matrix  multiplication using JBLAS
groovySci.math.array.Matrix.metaClass.multiply = { 
   groovySci.math.array.Matrix m ->   // the input Matrix

 // transform the input matrix to the JBLAS representation
     dm =  new org.jblas.DoubleMatrix(m.toDoubleArray())
 // transform the receiver to the JBLAS representation
     dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
 // fast multiply using JBLAS Native BLAS
     mulRes = dmthis.mmul(dm)

 // return back result as a double [][] array
    groovySci.math.array.JBLASUtils.JBLASDoubleMatrixToDouble2D(mulRes)
}


x = rand(2000, 2000) // a large 2000X2000 matrix  

tic()
y = x*x  // multiply with JBLAS Native BLAS
tmJBLAS = toc()

xx=Rand(2000, 2000)  // a large 2000X2000 double[][] array
tic()
yy=xx*xx  // multiply with Java
tmJ = toc()


println("time for matrix multiplication using Native BLAS = "+tmJBLAS+", time with Java = "+tmJ)
// compute the eigenvalues of a general matrix using JBLAS
groovySci.math.array.Matrix.metaClass.jblasEigenValues = {
	// transform the receiver to the JBLAS representation
	dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
	org.jblas.Eigen.eigenvalues(dmthis)
}

xs = rand(4,4)
xeigs = xs.jblasEigenValues()


// compute the eigenvectors of a general matrix using JBLAS
//   returns an array of ComplexDoubleMatrix objects containing the eigenvectors
//          stored as the columns of the first matrix, and the eigenvalues as the
//         diagonal elements of the second matrix.
groovySci.math.array.Matrix.metaClass.jblasEigenVectors = {
	// transform the receiver to the JBLAS representation
	dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
	org.jblas.Eigen.eigenvectors(dmthis)
}

xs2 = rand(3,3)
xeigvecs = xs2.jblasEigenVectors()
xeig0 = xeigvecs[0]



     
//  Compute the eigenvalues for a symmetric matrix.
groovySci.math.array.Matrix.metaClass.jblas_symmetricEigenvalues = {
	// transform the receiver to the JBLAS representation
	dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
	org.jblas.Eigen.symmetricEigenvalues(dmthis)
}

//  Computes the eigenvalues and eigenvectors for a symmetric matrix.
//  returns an array of DoubleMatrix objects containing the eigenvectors
//         stored as the columns of the first matrix, and the eigenvalues as
//         diagonal elements of the second matrix.
groovySci.math.array.Matrix.metaClass.jblas_symmetricEigenvectors = {
	// transform the receiver to the JBLAS representation
	dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
	org.jblas.Eigen.symmetricEigenvectors(dmthis)
}


//  Compute Cholesky decomposition of A
//      @param A symmetric, positive definite matrix (only upper half is used)
//      @return upper triangular matrix U such that  A = U' * U
 groovySci.math.array.Matrix.metaClass.jblas_cholesky = {
 	// transform the receiver to the JBLAS representation
	dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
	org.jblas.Decompose.cholesky(dmthis)    
 }

 
/** Solves the linear equation A*X = B. */
groovySci.math.array.Matrix.metaClass.jblas_solve = {
  groovySci.math.array.Matrix B ->   // input is the B Matrix, the receiver is A

	// transform the input Matrix B to the JBLAS representation
	Bm =  new org.jblas.DoubleMatrix(B.toDoubleArray())
	// transform the receiver to the JBLAS representation
	dmthis = new org.jblas.DoubleMatrix(delegate.toDoubleArray())
	// return the solution as a convenient GroovySci Matrix
	groovySci.math.array.JBLASUtils.JBLASDoubleMatrixToDouble2D(org.jblas.Solve.solve(dmthis, Bm))
	// groovySci.math.array.JBLASUtils.JBLASDoubleMatrixToMatrix(org.jblas.Solve.solve(dmthis, Bm))  // similar
}

 A = rand(3,3)
 B = rand(3,3)
 x = A.jblas_solve(B)
 shouldBeZero = A*x-B

public static DoubleMatrix jblas_solve(double [][]A, double [][] B) {
    return org.jblas.Solve.solve(new DoubleMatrix(A),  new DoubleMatrix(B));
}

/** Solves the linear equation A*X = B for symmetric A. */
public static DoubleMatrix jblas_solveSymmetric(double [][]A, double [][] B) {
    return org.jblas.Solve.solveSymmetric(new DoubleMatrix(A),  new DoubleMatrix(B));
}

/** Solves the linear equation A*X = B for symmetric and positive definite A. */
public static DoubleMatrix jblas_solvePositive(double [][]A, double [][] B) {
    return org.jblas.Solve.solvePositive(new DoubleMatrix(A),  new DoubleMatrix(B));
}
 