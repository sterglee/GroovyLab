import org.bytedeco.javacpp.DoublePointer

// dimensions of matrices
  M = 20

// create sample arrays of 1s as matrices
    a = Rand(M*M)

    xa = new DoublePointer(a)
  
  
   m = gsl_matrix_view_array(xa, M, M)
  
   eval = gsl_vector_complex_alloc(M)
   evec = gsl_matrix_complex_alloc(M, M)
  
   w = gsl_eigen_nonsymmv_alloc(M)
  
  gsl_eigen_nonsymmv(m.matrix(), eval, evec, w)
  
  gsl_eigen_nonsymmv_free(w)
  
  gsl_eigen_nonsymmv_sort(eval, evec, GSL_EIGEN_SORT_ABS_DESC)
  
   evals = new Matrix(M, 2)
   evecsReal = new Matrix(M, M)
   evecsImag = new Matrix(M, M)
  
  for (i in 0..M-1) {
       eval_i = gsl_vector_complex_get( eval, i)
      
       evec_i = gsl_matrix_complex_column(evec, i)
      
      // get computed eigenvalues i
      evals[i, 0] = eval_i.dat().get(0)
      evals[i, 1] = eval_i.dat().get(1)
      
      // get computed eigenvector i
      for (j in 0..M-1) {
           z = gsl_vector_complex_get(evec_i.vector(), j)
          evecsReal[i, j] = z.dat().get(0)
          evecsImag[i, j] = z.dat().get(1)
          }
        }
          
  
        gsl_vector_complex_free(eval)
        gsl_matrix_complex_free(evec)

        
        am = rowMajor(a, M, M)  // convert double [] array a to a row major matrix
        eam = eig(am)
        