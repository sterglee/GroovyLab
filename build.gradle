apply plugin: 'java'
sourceCompatibility = 1.9
targetCompatibility = 1.9

apply plugin: 'groovy'


buildscript {
    ext {
        dl4j_version = "1.0.0-beta5"
         spark_version = "2.4.4"
        
    }
    repositories {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://mvnrepository.com/artifact/org.apache.spark/spark-core"}
        mavenCentral()
    }
    
}
apply plugin: "application"

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

dependencies {
    compile "org.deeplearning4j:deeplearning4j-core:${dl4j_version}"
    compile "org.nd4j:nd4j-native-platform:${dl4j_version}"
    compile "org.deeplearning4j:deeplearning4j-nlp:${dl4j_version}"
    //compile "org.deeplearning4j:dl4j-spark_2.12:${dl4j_version}"
    compile "org.deeplearning4j:deeplearning4j-nn:${dl4j_version}"
    compile "org.deeplearning4j:deeplearning4j-modelimport:${dl4j_version}"
   // compile "org.apache.spark:spark-core_2.12:${spark_version}"
    //compile "org.apache.spark:spark-sql_2.12:${spark_version}"
   // compile "org.apache.spark:spark-mllib_2.12:${spark_version}"
  //  compile "org.apache.spark:spark-streaming_2.12:${spark_version}"
    compile fileTree(dir: "lib", include: "*.jar")
    compile fileTree(dir: "libgroovy", include: "*.jar")
    compile fileTree(dir: "build/classes/java/main", include: "*.class")
    compile fileTree(dir: "GroovyLab-Src", include: "*.class")
  
}


sourceSets {
    main {
       
        java {
             
            Set<File> classpathFiles =  fileTree (dir : "lib", include: "*.jar").getFiles()+ fileTree (dir : "libgroovy", include: "*.jar").getFiles()+new File("GroovyLab-Src")
            compileClasspath =  files(classpathFiles)
            
            srcDir "GroovyLab-Src"
    }
   }
}

jar {
    baseName="GroovyLab"
    includeEmptyDirs = false
    mainClassName="gExec.gLab.gLab"
    
     
           

           
           def classpathfiles = fileTree (dir : "lib", include: "*.jar").getFiles().name
           def appendedLib = classpathfiles.collect { item -> "lib/"+item}.join(' ')
           
           def groovyclasspathfiles = fileTree (dir : "libgroovy", include: "*.jar").getFiles().name
           def groovyappendedLib = groovyclasspathfiles.collect { item -> "libgroovy/"+item}.join(' ')
           
    manifest {
        attributes('Class-Path': appendedLib+groovyappendedLib,
'Main-Class':'gExec.gLab.gLab')
    }

def extensions = [ 'class', 'gsci',  'gif', 'groovy', 'htm', 'html', 'jpg', 'plots-gsci',  'png', 'properties',  'txt', 'weka-gsci', 'javaSGT', 'wav-gsci'] 

   
   from(sourceSets.main.java.srcDirs) {
      extensions.each({extension -> include "**/*.${extension}"})
   }

    
 }


task fatJar(type: Jar) {

    baseName="GroovyLab"
    includeEmptyDirs = false
    mainClassName="gExec.gLab.gLab"
    zip64=true

    manifest {
      attributes(
'Main-Class':'gExec.gLab.gLab')
    }
  
  
   
  classifier = 'all'
    
  
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } 
    }
 {
      //  exclude "META-INF/*.SF"
       exclude "META-INF/*.DSA"
     //   exclude "META-INF/*.RSA"
    }

   
    with jar
   
}
